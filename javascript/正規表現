正規表現を使用する方法は2種類


```
// スラッシュによって囲まれたパターンからなる正規表現リテラル
var re = /ab+c/;

//  RegExp オブジェクトのコンストラクタ関数を呼び出す方法
var re = new RegExp('ab+c');
```

exec	文字列中で一致するものを検索する RegExp のメソッドです。結果情報の配列を返します。
test	文字列中で一致するものがあるかをテストする RegExp のメソッドです。true または false を返します。
match	文字列中で一致するものを検索する String のメソッドです。結果情報の配列を返します。マッチしない場合は null を返します。
matchAll	キャプチャグループを含んだ、すべてのマッチをもつ iterator を返す String のメソッドです。 
search	文字列中で一致するものがあるかをテストする String のメソッドです。マッチした場所のインデックスを返します。検索に失敗した場合は -1 を返します。
replace	文字列中で一致するものを検索し、マッチした部分文字列を別の部分文字列に置換する String のメソッドです。
split	正規表現または固定文字列を用いて文字列を分割し、部分文字列の配列に入れる String のメソッドです。

https://ja.wikibooks.org/wiki/JavaScript/RegExp#%E3%83%96%E3%83%A9%E3%82%B1%E3%83%83%E3%83%88%E3%80%8E[]%E3%80%8F


変数に""で格納すると\は消える
正規表現で一般的に使う「\d」「\w」などの「\（バックスラッシュ）」はエスケープ処理と判断されてしまいます。
そこで、対応策として「\\d」や「\\w」のように２重で記述
```
var str = "\s\S"
console.log(str) // sS
```
